{
  "hooks快速生成模板": {
    "prefix": "Hooks",
    "body": [
      "import {",
      "  add[XXX],",
      "  batchDel[XXX],",
      "  del[XXX],",
      "  edit[XXX],",
      "  get[XXX]List",
      "} from \"@/api/[xxx]\";",
      "import { addDialog } from \"@/components/ReDialog\";",
      "import type { SearchColumn } from \"@/components/SearchBar\";",
      "import type { PaginationProps } from \"@pureadmin/table\";",
      "import { cloneDeep, deviceDetection, getKeyList } from \"@pureadmin/utils\";",
      "import { ElMessage } from \"element-plus\";",
      "import { h, reactive, ref } from \"vue\";",
      "import [xxx]Form from \"./[xxx]Form.vue\";",
      "",
      "export function use[XXX]() {",
      "  const tableRef = ref();",
      "  const loading = ref<boolean>(true);",
      "  const searchColumns: SearchColumn[] = [];",
      "  const queryParams = ref<any>({});",
      "  const pagination = reactive<PaginationProps>({",
      "    total: 0,",
      "    pageSize: 15,",
      "    currentPage: 1,",
      "    background: true",
      "  });",
      "  const columns: TableColumnList = [",
      "    {",
      "      label: \"勾选列\", // 如果需要表格多选，此处label必须设置",
      "      type: \"selection\",",
      "      fixed: \"left\",",
      "      reserveSelection: true // 数据刷新后保留选项",
      "    },",
      "    { label: \"ID\", prop: \"id\" },",
      "    { label: \"操作\", fixed: \"right\", slot: \"operation\", width: 150 }",
      "  ];",
      "  const dataList = ref([]);",
      "  const selectedNum = ref(0);",
      "  const [xxx]FormRef = ref();",
      "",
      "  async function getDataList() {",
      "    loading.value = true;",
      "    const params = { ...queryParams.value };",
      "    params.pageNo = pagination.currentPage;",
      "    params.pageSize = pagination.pageSize;",
      "    const res = await get[XXX]List(params);",
      "    if (res.success) {",
      "      dataList.value = res.data.list || [];",
      "      pagination.total = res.data.total;",
      "    } else {",
      "      ElMessage.error(res.msg);",
      "    }",
      "    loading.value = false;",
      "  }",
      "",
      "  function handleSearch(params: any) {",
      "    queryParams.value = params;",
      "    pagination.currentPage = 1;",
      "    getDataList();",
      "  }",
      "",
      "  function handleReset() {",
      "    queryParams.value = {};",
      "    pagination.currentPage = 1;",
      "    getDataList();",
      "  }",
      "",
      "  function pageSizeChange(val: number) {",
      "    pagination.pageSize = val;",
      "    getDataList();",
      "  }",
      "",
      "  function currentPageChange(val: number) {",
      "    pagination.currentPage = val;",
      "    getDataList();",
      "  }",
      "",
      "  /** 当CheckBox选择项发生变化时会触发该事件 */",
      "  function handleSelectionChange(val) {",
      "    selectedNum.value = val.length;",
      "    // 重置表格高度",
      "    tableRef.value.setAdaptive();",
      "  }",
      "",
      "  function open[XXX]Form(title = \"新增\", info?: any) {",
      "    addDialog({",
      "      title: `\\${title}`,",
      "      props: {",
      "        info",
      "      },",
      "      width: 800,",
      "      draggable: true,",
      "      fullscreen: deviceDetection(),",
      "      fullscreenIcon: true,",
      "      closeOnClickModal: false,",
      "      contentRenderer: () => h([xxx]Form, { ref: [xxx]FormRef }),",
      "      beforeSure: done => {",
      "        const formRef = [xxx]FormRef.value.getRef();",
      "        const data = cloneDeep([xxx]FormRef.value.getState());",
      "        formRef.formInstance.validate(async (isValid: boolean) => {",
      "          if (isValid) {",
      "            const res = data.id ? await edit[XXX](data) : await add[XXX](data);",
      "            if (res.success) {",
      "              ElMessage.success(res.msg);",
      "              done();",
      "              getDataList();",
      "            } else {",
      "              ElMessage.error(res.msg);",
      "            }",
      "          } else {",
      "            ElMessage.info(\"请完善表单\");",
      "          }",
      "        });",
      "      }",
      "    });",
      "  }",
      "",
      "  function handleAdd() {",
      "    open[XXX]Form(\"新增\");",
      "  }",
      "",
      "  function handleEdit(row: any) {",
      "    const info = cloneDeep(row);",
      "    open[XXX]Form(\"修改\", row);",
      "  }",
      "",
      "  async function handleDel(row: any) {",
      "    const data = { id: row.id };",
      "    const res = await del[XXX](data);",
      "    if (res.success) {",
      "      ElMessage.success(res.msg);",
      "      getDataList();",
      "    } else {",
      "      ElMessage.error(res.msg);",
      "    }",
      "  }",
      "",
      "  async function handleBatchDel() {",
      "    // 返回当前选中的行",
      "    const curSelected = tableRef.value.getTableRef().getSelectionRows();",
      "    // 接下来根据实际业务，通过选中行的某项数据，比如下面的id，调用接口进行批量删除",
      "    const res = await batchDel[XXX]({",
      "      ids: getKeyList(curSelected, \"id\")",
      "    });",
      "    if (res.success) {",
      "      ElMessage.success(res.msg);",
      "      tableRef.value.getTableRef().clearSelection();",
      "      getDataList();",
      "    } else {",
      "      ElMessage.error(res.msg);",
      "    }",
      "  }",
      "",
      "  return {",
      "    tableRef,",
      "    loading,",
      "    searchColumns,",
      "    queryParams,",
      "    pagination,",
      "    columns,",
      "    dataList,",
      "    selectedNum,",
      "",
      "    getDataList,",
      "    handleSearch,",
      "    handleReset,",
      "    pageSizeChange,",
      "    currentPageChange,",
      "    handleSelectionChange,",
      "    handleAdd,",
      "    handleEdit,",
      "    handleDel,",
      "    handleBatchDel",
      "  };",
      "}",
      ""
    ],
    "description": "hooks快速生成模板"
  }
}
